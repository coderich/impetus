<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage />
	<TimerPackage />
	<AliasPackage />
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>functions</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>impetus.styleGauge</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

function impetus:styleGauge(gauge, color)
  local colors = {
    green = {
      front = { "#98f041", "#8cf029", "#66cc00", "#52a300", "#66cc00" },
      back = { "#78bd33", "#6ebd20", "#4c9900", "#387000", "#4c9900" },
    },
    red = {
      front = { "#f04141", "#ef2929", "#cc0000", "#a40000", "#cc0000" },
      back = { "#bd3333", "#bd2020", "#990000", "#700000", "#990000" },
    },
    blue = {
      front = { "#4141f0", "#2929ef", "#0000cc", "#0000a4", "#0000cc" },
      back = { "#3333bd", "#2020bd", "#000099", "#000070", "#000099" },
    },
  }
  
  local stops = colors[color]
    
  gauge.front:setStyleSheet([[
    background-color: QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 ]].. stops.front[1] ..[[, stop: 0.1 ]].. stops.front[2] ..[[, stop: 0.49 ]].. stops.front[3] ..[[, stop: 0.5 ]].. stops.front[4] ..[[, stop: 1 ]].. stops.front[5] ..[[);
    border-top: 1px black solid;
    border-left: 1px black solid;
    border-bottom: 1px black solid;
    border-radius: 7;
    padding: 3px;
  ]])

  gauge.back:setStyleSheet([[
    background-color: QLinearGradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 ]].. stops.back[1] ..[[, stop: 0.1 ]].. stops.back[2] ..[[, stop: 0.49 ]].. stops.back[3] ..[[, stop: 0.5 ]].. stops.back[4] ..[[, stop: 1 ]].. stops.back[5] ..[[);
    border-width: 1px;
    border-color: black;
    border-style: solid;
    border-radius: 7;
    padding: 3px;
  ]])
end
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>_ref</name>
				<packageName></packageName>
				<script>local unescape = function(str)
  str = string.gsub (str, "+", " ")
  str = string.gsub (str, "%%(%x%x)", function(h) return string.char(tonumber(h,16)) end)
  return str
end

local unescapeHtmlEntities = function(str)
  str = string.gsub( str, '&amp;lt;', '&lt;' )
  str = string.gsub( str, '&amp;gt;', '&gt;' )
  str = string.gsub( str, '&amp;quot;', '"' )
  str = string.gsub( str, '&amp;apos;', "'" )
  str = string.gsub( str, '&amp;#(%d+);', function(n) return string.char(n) end )
  str = string.gsub( str, '&amp;#x(%d+);', function(n) return string.char(tonumber(n,16)) end )
  str = string.gsub( str, '&amp;amp;', '&amp;' ) -- Be sure to do this after all others
  return str
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.setInterval</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

function impetus:setInterval(delay, cb)
  local i = 0;
  local continue = true;
  local interval = delay / 1000
  
  local makeTimer = function(self)
    tempTimer(interval, function()
      if (continue) then
        i = i + 1;
        cb(i)
        self(self)
      end
    end)
  end

  makeTimer(makeTimer)
  
  return function()
    continue = false
  end
end
</script>
				<eventHandlerList />
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>components</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>layout</name>
				<packageName></packageName>
				<script>clearWindow();
enableCommandLine();
disableScrollBar();

impetus = impetus or {}

-- Regions
impetus.leftRegion = Geyser.Container:new({
  name = "leftRegion",
  x = 0, y = 0, width = "25%", height = "100%",
})

impetus.bodyRegion = Geyser.Container:new({
  name = "bodyRegion",
  x = "25%", y = 0, width = "50%", height = "100%",
})

impetus.rightRegion = Geyser.Container:new({
  name = "rightRegion",
  x = "75%", y = 0, width = "25%", height = "100%",
})

-- Containers
impetus.mapContainer = Geyser.Container:new({
  name = "mapContainer",
  x = 0, y = 0, width = "100%", height = "30%",
}, impetus.leftRegion)

impetus.roomContainer = Geyser.Container:new({
  name = "roomContainer",
  x = 0, y = "30%", width = "100%", height = "70%",
}, impetus.leftRegion)

impetus.menuContainer = Geyser.Container:new({
  name = "menuContainer",
  x = 0, y = 20, width = "100%", height = "-20px",
}, impetus.rightRegion)
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.console</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

local bodyConsole = Geyser.MiniConsole:new({
  name = "bodyConsole",
  x = 0, y = 0, width = "100%", height = "-30px",
  fontSize = 15,
  autoWrap = true,
  scrollBar = false,
  color = "black",
}, impetus.bodyRegion)

setCmdLineStyleSheet("main", [[
  QPlainTextEdit {
    padding-left: 0px;
    color: white;
    background-color: grey;
  }
]])

local handlers = {
  ["gmcp.impetus.data"] = function() bodyConsole:cecho(gmcp.impetus.data .. "\n") end,
  ["gmcp.impetus.dialog"] = function() bodyConsole:cecho("\n" .. gmcp.impetus.dialog .. "\n") end,
}

function impetus:console(e)
  handlers[e]()
end;

bodyConsole:clear();
</script>
				<eventHandlerList>
					<string>gmcp.impetus.data</string>
					<string>gmcp.impetus.dialog</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>menu</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

local menu = {
  tabs = {"Gossip", "Auction", "Journal"},
  color1 = "rgb(0,0,70)",
  color2 = "rgb(50,0,0)",
}

local header = Geyser.HBox:new({
  name = "header",
  x = 0, y = 0, width = "100%", height = 30,
}, impetus.menuContainer)

local body = Geyser.Label:new({
  name = "body",
  x = 0, y = 30, width = "100%", height = "100%",
}, impetus.menuContainer)

function onClick(tab)
  menu[menu.current]:hide()
  menu.current = tab
  menu[menu.current]:show()
end

for k,v in pairs(menu.tabs) do
  menu[v.."tab"] = Geyser.Label:new({
    name = "menu."..v.."tab",
  }, header)
  
  menu[v.."tab"]:setFontSize(15)
  menu[v.."tab"]:setStyleSheet([[
    background-color: ]]..menu.color1..[[;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    margin-right: 1px;
    margin-left: 1px;
  ]])
  
  menu[v.."tab"]:echo("&lt;center&gt;"..v)
  
  menu[v.."tab"]:setClickCallback(onClick, v)
  
  menu[v] = Geyser.Label:new({
    name = "menu."..v,
    x = 0, y = 0, width = "100%", height = "100%",
  }, body)

  menu[v]:setStyleSheet([[
    background-color: ]]..menu.color1..[[;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
  ]])
  
  menu[v.."body"] = Geyser.Label:new({
    name = "menu."..v.."body",
    x = 0, y = 0, width = "100%", height = "100%",
  }, menu[v])
  
  menu[v.."body"]:setStyleSheet([[
    background-color: ]]..menu.color2..[[;
    border-radius: 10px;
    margin: 5px;
  ]])
  
  menu[v]:hide()
end


body:setStyleSheet([[
  background-color: ]]..menu.color1..[[;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
]])

menu.current = menu.current or menu.tabs[1]
onClick(menu.tabs[1]);
</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.room</name>
				<packageName></packageName>
				<script>impetus = impetus or {}
impetus.roomItems = impetus.roomItems or {}

-- Geyser.VBox:new({
  -- name = "roomBox",
  -- x = 0, y = 0, width = "100%", height = "100%",
  -- color = "black",
-- }, impetus.roomContainer)

function impetus:room()
  -- Clear all room items
  for i in ipairs(impetus.roomItems) do
    impetus.roomItems[i].name:hide()
    impetus.roomItems[i].label:hide()
    impetus.roomItems[i].gauge:hide()
  end
  
  -- Recreate room items
  for i,unit in ipairs(gmcp.impetus.room.units) do
    local y = i * 50 - 45
    
    local hbox = Geyser.HBox:new({
      name = "hbox" .. i,
      x = 0, y = y, width = "100%", height = "20px",
    }, impetus.roomContainer)
    
    local name = Geyser.Label:new({
      name = "name" .. i,
      color = "black",
      fgColor = "magenta",
      fontSize = 15, message = unit.name,
    }, hbox)
    
    local label = Geyser.Label:new({
      name = "label" .. i,
      color = "black",
      h_stretch_factor = 2.0,
      fgColor = "yellow",
      fontSize = 15, message = "( recovering )",
    }, hbox)
    
    local gauge = Geyser.Gauge:new({
      name = "gauge" .. i,
      x = 0, y = y + 23 .. "px", width = "100%", height = "3px",
    }, impetus.roomContainer)
    
    gauge:setValue(0, 100)
    impetus:styleGauge(gauge, "green")
    impetus.roomItems[i] = { name = name, label = label, gauge = gauge }
    
    -- local clearInterval = impetus:setInterval(1500, function(counter)
      -- local value = counter * 20;
      -- gauge:setValue(value , 100)
      -- if (value &gt;= 100) then clearInterval() end
    -- end)
  end
end
</script>
				<eventHandlerList>
					<string>gmcp.impetus.room</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.hud</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

local hpBar = Geyser.Gauge:new({
  name = "hpBar",
  x = 0, y = "-30px", width = "30%", height = "20px",
}, impetus.bodyRegion)

local maBar = Geyser.Gauge:new({
  name = "maBar",
  x = "35%", y = "-30px", width = "30%", height = "20px",
}, impetus.bodyRegion)

local stBar = Geyser.Gauge:new({
  name = "stBar",
  x = "70%", y = "-30px", width = "30%", height = "20px",
}, impetus.bodyRegion)

impetus:styleGauge(hpBar, "red")
impetus:styleGauge(maBar, "blue")
impetus:styleGauge(stBar, "green")

function impetus:hud()
  hpBar:setValue(gmcp.impetus.status.hp, gmcp.impetus.status.mhp, "&lt;center&gt;&lt;b&gt;"..gmcp.impetus.status.hp.." / "..gmcp.impetus.status.mhp.."&lt;/b&gt;&lt;/center&gt;")
end;
</script>
				<eventHandlerList>
					<string>gmcp.impetus.status</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.map</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

local mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = 0, width = "100%", height = "100%",
}, impetus.mapContainer)

function impetus:map()
  local areaId = 1
  deleteArea(1)
  clearAreaUserData(1)
  setAreaName(areaId, gmcp.impetus.map.name)
  
  for i,room in ipairs(gmcp.impetus.map.rooms) do
    addRoom(i)
    setRoomArea(i, areaId)
    setRoomCoordinates(i, room.x, room.y, room.z)
  end
  
  for i,exit in ipairs(gmcp.impetus.map.exits) do
    for k,v in pairs(exit) do
      setExit(i, v, k)
    end
  end
  
  centerview(gmcp.impetus.map.room)
  setMapZoom(15)
end

-- 
-- killAnonymousEventHandler(impetus.mapHandlerId or -1)
-- 
-- downloadFile(getMudletHomeDir() .. "/map.xml", "http://localhost:8000/map.xml")
-- 
-- impetus.mapHandlerId = registerAnonymousEventHandler("sysDownloadDone", function(_, location)
  -- local mapper = Geyser.Mapper:new({
    -- name = "mapper",
    -- x = 0, y = 0, width = "100%", height = "100%",
  -- }, impetus.mapContainer)
-- 
  -- loadMap(location)
  -- setMapZoom(20)
  -- centerview(1)
-- end)


-- deleteArea(1)
-- local areaId = 1;
-- setAreaName(areaId, "impetus")
-- 
-- local room1 = createRoomID()
-- addRoom(room1)
-- setRoomCoordinates(room1, 0, 0, 0)
-- setRoomArea(room1, areaId)
-- 
-- local room2 = createRoomID()
-- addRoom(room2)
-- setRoomCoordinates(room2, 0, 2, 0)
-- setRoomArea(room2, areaId)
-- 
-- setExit(room1, room2, "n");
-- setExit(room2, room1, "s");
-- setDoor(room1, "n", 1)
-- setDoor(room2, "s", 3)
-- 
-- centerview(room1)
-- setMapZoom(15)
-- 
</script>
				<eventHandlerList>
					<string>gmcp.impetus.map</string>
				</eventHandlerList>
			</Script>
		</ScriptGroup>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>gmcp</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>impetus.onLogin</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

function impetus:onLogin()
  sendGMCP("impetus.signup " .. yajl.to_string{username = "richard", password = "password"})
end;
</script>
				<eventHandlerList>
					<string>gmcp.client.login</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.onMenu</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

function impetus:onMenu()
  -- cecho(gmcp.impetus.menu.data .. "\n")
  -- impetus.bodyConsole:cecho(gmcp.impetus.menu.data .. "\n")
end;
</script>
				<eventHandlerList>
					<string>gmcp.impetus.menu</string>
				</eventHandlerList>
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>impetus.onDialog</name>
				<packageName></packageName>
				<script>impetus = impetus or {}

function impetus:onDialog()
  -- cecho(gmcp.impetus.dialog .. "\n")
  -- impetus.bodyConsole:cecho(gmcp.impetus.dialog.data .. "\n")
end;
</script>
				<eventHandlerList>
					<string>gmcp.impetus.dialog</string>
				</eventHandlerList>
			</Script>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
